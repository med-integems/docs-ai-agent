services:
  app-server:
    build:
      context: ./server # Build the Dockerfile from the current directory
      dockerfile: Dockerfile
      target: prod 
    image: report-agent-server
    container_name:  report-agent-servr-container
    ports:
      - "5000:5000" # Ensure PORT is set in your environment
    environment:
      - DB_HOST=${DB_HOST}
      - PORT=5000 # Ensure PORT is defined in `.env` or set when running `docker-compose`
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    command: ["./main"] # Run the app in development mode
    volumes:
      - ./.env:/app/.env # Ensure the `.env` file is explicitly mounted if needed
    depends_on:
      - postgres
      - redis
  app-client:
    build:
      context: ./client # Build the Dockerfile from the current directory
      dockerfile: Dockerfile
      target: prod # Use the 'dev' stage of the multistage Dockerfile
    image: report-agent-client
    container_name: report-agent-client-container
    ports:
      - "3000:3000" # Ensure PORT is set in your environment
    environment:
      - NODE_ENV=production
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    command: ["npm", "run", "start"] # Run the app in development mode
    volumes:
      - ./client:/app # Bind mount allows live code updates during development
      - /app/node_modules
    depends_on:
      - app-server
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_stored_data:/data

  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vidstractdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  caddy:
    image: caddy:latest
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile # Caddy configuration file
      - caddy_data:/data # Data folder for Caddy
      - caddy_config:/config # Config folder for Caddy    depends_on:
   
    depends_on:  
      - app-client

volumes:
  postgres_data: {}
  caddy_data: {}
  caddy_config: {}
  redis_stored_data: {}
